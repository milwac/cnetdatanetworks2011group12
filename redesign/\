#include "network_layer.h"

DATAGRAM *dg_ptr;
bool table_changed;

void cleanUpAndStartApp(){
	printf("Routing done!\n");
	for(int i=0; i<MAX_NODES; i++){
		if(i != nodeinfo.nodenumber && nl_table[i].cost < LONG_MAX){
			printf("Dest : %d | Via : %d | Link : %d | Cost : %ld\n", nl_table[i].dest, nl_table[i].via, nl_table[i].link, nl_table[i].cost);
		}
	}
}

void startTimer0(CnetTime timeout){
	CNET_start_timer(EV_TIMER0, timeout, 0); 
}
void setup_routing(){
	if(!table_changed){
		cleanUpAndStartApp();
		return;
	}
	table_changed = false;
	DATAGRAM d;
	d.data_len = 0;
	getCurrTime(&d.timestamp);
	d.fragOffset_nnSrc = nodeinfo.nodenumber;
	d.flagOffset_nnVia = nodeinfo.nodenumber;
	d.source = nodeinfo.address;
	d.dest = nodeinfo.address;
	queue_add(network_queue, &d, (int)DATAGRAM_HEADER_SIZE);
	startTimer0(100);
	CNET_start_timer(EV_TIMER9, 2000000,0);
}
//used for polling the network queue and pushing packets to the DLL
static EVENT_HANDLER(timeout0){
	if(queue_nitems(network_queue) == 0){
		startTimer0(1000);
		return;
	}
	size_t len = 0;
	dg_ptr = queue_peek(network_queue, &len);
	DATAGRAM dg = *dg_ptr;
	if(len == DATAGRAM_HEADER_SIZE){ //routing packet
		bool res = push_datagram(-1, dg);
		if(res){
			dg_ptr = queue_remove(network_queue, &len);
		}
	} else { // data packet

	}
	startTimer0(1000);
}

void initialize_nl(){
	for(int i=0; i<MAX_NODES; i++){
		nl_table[i].dest = -1;		
		nl_table[i].via = -1;		
		nl_table[i].link = -1;
		nl_table[i].cost = LONG_MAX;		
	}
	table_changed = true;
	network_queue = queue_new();
	receiver_queue = queue_new();
}

void reboot_nl(){
	CHECK(CNET_set_handler(EV_TIMER0, timeout0, 0));
	initialize_nl();
	setup_routing();
}

void update_routing_table(DATAGRAM dg, int link){
	if(dg.source == nodeinfo.address){
		return; // if self generated packet, do nothing
	} else {
		bool send = false;
		long long currTime;
		getCurrTime(&currTime);
		long currCost = (long)(currTime - dg.timestamp)/1000;
		if(nl_table[dg.fragOffset_nnSrc].dest == -1){ // if entry is not in the routing table, update fields
			nl_table[dg.fragOffset_nnSrc].dest = dg.source;
			nl_table[dg.fragOffset_nnSrc].via = dg.dest;
			nl_table[dg.fragOffset_nnSrc].link = link;
			nl_table[dg.fragOffset_nnSrc].cost = currCost;
			send = true;
			//table_changed = true;
		} else {
			if(nl_table[dg.fragOffset_nnSrc].cost > currCost){
				nl_table[dg.fragOffset_nnSrc].dest = dg.source;
				nl_table[dg.fragOffset_nnSrc].via = dg.dest;
				nl_table[dg.fragOffset_nnSrc].link = link;
				nl_table[dg.fragOffset_nnSrc].cost = currCost;
				send = true;
				table_changed = true;
			}
		}
		if(send){
			dg.flagOffset_nnVia = nodeinfo.nodenumber;
			dg.dest = nodeinfo.address;
			queue_add(network_queue, &dg, (int)DATAGRAM_HEADER_SIZE);
		}
	}	
}
 
void push_to_network_queue(DATAGRAM dg, int link){
	if(dg.data_len == 0){//Routing packet
		update_routing_table(dg, link);
	} else {//Data packet

	}	
}

